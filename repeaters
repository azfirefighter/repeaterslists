#!/usr/bin/env python3

import pandas as pd
from geopy import distance
from pandas.api.types import CategoricalDtype
from geographiclib.geodesic import Geodesic

kspc = [32.38354167, -94.87277778]
#home = [32.38318056, -94.84388889]
#n5vgq = [32.40527778, -94.72027778]
#longview_mall  = [32.54133056, -94.75416667]
#longview_courthouse = [32.49678056, -94.73861111]
#henderson_water_tower = [32.15377778, -94.80083333]
#mims_chapel_vfd = [32.798347,-94.568262]

center = kspc

included_frequencies = [[144,148], [420,450], [28,30], [50,54]]

district_6 = [
    'Gregg',
    'Upshur',
    'Rusk',
    'Smith',
    'Camp',
    'Marion',
    'Harrison',
    'Panola',
    'Shelby',
    'Nacogdoches',
    'Cherokee',
    'Anderson',
    'Henderson',
    'Van Zandt',
    'Rains',
    'Wood',
    ]
    
district_4 = [
	'Denton',
	'Tarrant',
	'Johnson',
	'Somervell',
	'Hood',
	'Erath',
	'Palo Pinto',
	'Parker',
	'Wise',
	'Dallas',
	'Collin',
	'Rockwall',
	'Hunt',
	'Kaufman',
	'Navarro',
	'Ellis',
	]

local_counties = district_6

county_categories = CategoricalDtype(local_counties, ordered=True)

priorityScan_counties = [
    'Gregg',
    'Rusk',
    'Upshur',
    ]

excluded_modes=['DStar', 'DMR']

desired_columns = [
    'Output Freq',
    'Input Freq',
    'Uplink Tone',
    'Downlink Tone',
    'Call',
    'Location',
    'County',
    'Mode',
    'Lat',
    'Long',
    'Distance',
    'Bearing',
    'PriorityScan',
    ]


# First we'll read in the statewide repeater list.

df = pd.read_csv('~/Downloads/repeaterbook_repeaters_.csv')

# Next we'll reduce the dataFrame down to rows just in the desired counties.
# We'll also throw out any rows with excluded radio modes.
# And we'll set a column called 'PriorityScan' based on the counties we don't want to miss scanning.

df = df[df['County'].isin(local_counties)]
df = df[~df['Mode'].isin(excluded_modes)]
df['PriorityScan'] = df['County'].isin(priorityScan_counties)

# Now we'll limit the dataFrame down to just frequencies in the target ranges

df = df[( (df['Output Freq'] > included_frequencies[0][0]) & (df['Output Freq'] < included_frequencies[0][1])) | 
    	( (df['Output Freq'] > included_frequencies[1][0]) & (df['Output Freq'] < included_frequencies[1][1])) ]


# Now we'll calculate the distances and bearings from the designated "center" using the row's Long and Lat.

distances = []
bearings = []
for i, j in zip(df['Lat'], df['Long']):
    distances.append(round(distance.distance([i, j], center).miles, 2))
    bearing = Geodesic.WGS84.Inverse(center[0], center[1], i, j)['azi1']
    if bearing < 0:
        bearing = bearing + 360
    bearings.append(round(bearing, 1))
df['Distance'] = distances
df['Bearing'] = bearings

# Now we'll re-sort by the Counties in a categorical list created from the ordered list above.

df['CountyForSort'] = df['County'].astype(county_categories)
df.sort_values(['CountyForSort', 'Long'], inplace=True)

# Now we generate a list of channel numbers and use them as the DataFrame's index.

df['Channel'] = list(range(len(df.index))) 
df['Channel'] = df['Channel'] + 1
df = df.set_index(['Channel'])

df.to_csv('~/Desktop/District6.csv', columns=desired_columns)

